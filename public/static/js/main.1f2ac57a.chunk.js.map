{"version":3,"sources":["queries/Queries.js","components/AddBook.js","App.js","reportWebVitals.js","index.js","components/Bookdetails.js","components/BookList.js"],"names":["AuthorsQuery","gql","BooksQuery","addBookMutation","singleBookQuery","displayAuthors","loading","data","disabled","authors","map","author","value","id","name","AddBook","useState","setName","genre","setGenre","authorId","setAuthorId","useQuery","useMutation","addBookMut","dataMutation","onSubmit","e","preventDefault","newObj","console","log","variables","refetchQueries","query","className","type","onChange","target","BookList","require","client","ApolloClient","uri","cache","InMemoryCache","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","displayBookDetails","error","book","books","item","Bookdetails","props","bookId","DisplayBooks","selectBook","onClick","selected","setSelected"],"mappings":"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","file":"static/js/main.1f2ac57a.chunk.js","sourcesContent":["import {  gql } from '@apollo/client';\r\n\r\nexport const AuthorsQuery = gql`\r\nquery GetAuthors{\r\n    authors{\r\n        name\r\n        id\r\n       \r\n    }\r\n}\r\n`\r\n\r\nexport const BooksQuery = gql`\r\nquery GetBooks{\r\n    books{\r\n        name\r\n        id\r\n        genre\r\n        \r\n    }\r\n}`\r\n\r\nexport  const addBookMutation = gql`\r\nmutation AddBook(\r\n    $name: String!, \r\n    $genre: String!, \r\n    $authorId: ID!\r\n    ) {\r\n      addBook(name: $name,\r\n         genre: $genre,\r\n          authorId: $authorId\r\n          ) {\r\n          name\r\n          id\r\n          }\r\n}`\r\n\r\nexport const singleBookQuery = gql`\r\n    query GetBook($id: ID){\r\n        book(id: $id) {\r\n            id\r\n            name\r\n            genre\r\n            author{\r\n                id\r\n                name\r\n                age\r\n                books {\r\n                    name\r\n                    id\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;","import React, {useState} from 'react';\r\nimport {useQuery,useMutation} from '@apollo/client';\r\nimport {AuthorsQuery,addBookMutation} from '../queries/Queries';\r\nimport {BooksQuery} from '../queries/Queries'\r\n\r\n\r\nconst displayAuthors = (loading, data) =>{\r\n    if(loading){\r\n        return( <option disabled>Loading authors</option> );\r\n    }else{\r\n        return data.authors.map(author =>{\r\n            return (<option key={author.id} value={author.id}>{author.name}</option>)\r\n        })\r\n    }\r\n}\r\n\r\nexport const AddBook =() =>{\r\n    const [name, setName] = useState('');\r\n    const [genre, setGenre] = useState('');\r\n    const [authorId, setAuthorId] = useState('');\r\n    const { loading, data } = useQuery(AuthorsQuery);\r\n    const [addBookMut, { dataMutation }] = useMutation(addBookMutation)\r\n  \r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        const newObj = {name , genre,authorId}\r\n        console.log(newObj);\r\n        addBookMut({\r\n            variables: {\r\n              name: name,\r\n              genre: genre,\r\n              authorId: authorId\r\n            },\r\n            refetchQueries:[({query: BooksQuery})]\r\n          });\r\n    }\r\n    return(\r\n        <form id=\"add-book\" onSubmit={handleSubmit}>\r\n            <div className=\"field\">\r\n                <label>Book name:</label>\r\n                <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\r\n            </div>\r\n            <div className=\"field\">\r\n                <label>Genre:</label>\r\n                <input type=\"text\" value={genre} onChange={(e) => setGenre(e.target.value)}  />\r\n            </div>\r\n            <div className=\"field\">\r\n                <label>Author:</label>\r\n                <select value={authorId} onChange={(e) => setAuthorId(e.target.value)} >\r\n                    <option>Select author</option>\r\n                    { displayAuthors(loading, data) }\r\n                </select>\r\n            </div>\r\n            <button>+</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n","import { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\nimport { AddBook } from './components/AddBook';\nconst { BookList } = require(\"./components/BookList\");\n\n\n\n\n\n\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache()\n});\n\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div id=\"main\">\n        <h1>Inaam Reading List</h1>\n    <br />\n        <BookList />\n       <AddBook/>\n      </div>\n    </ApolloProvider>\n\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from 'react';\r\nimport {useQuery} from '@apollo/client';\r\nimport {singleBookQuery} from '../queries/Queries';\r\n\r\nconst displayBookDetails = (loading, data, error) => {\r\n    if (loading) return <p>loading...</p>\r\n    if (error) return <p>Something went wrong..</p>\r\n    if (data.book) {\r\n        return (\r\n            <div>\r\n                <h2>{data.book.name}</h2>\r\n                <p>{data.book.genre}</p>\r\n                <p> <span>Author name: </span> {data.book.author.name}</p>\r\n                <p>All the books by the author: </p>\r\n                <ul className=\"other-books\">\r\n                    {data.book.author.books.map(item =>{\r\n                        return<li key={item.id}>{item.name}</li>\r\n                    })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }else{\r\n        return(\r\n            <div>\r\n                No data to display..\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Bookdetails = (props) => {\r\n    const { loading, data, error } = useQuery(singleBookQuery, {\r\n        variables: {\r\n            id: props.bookId\r\n        }\r\n    });\r\n\r\n    \r\n\r\n    /*const { loading, error, data } = useQuery(singleBookQuery, {\r\n        variables: {props.bookid}\r\n      });\r\n      if (loading) return <p>Loading ...</p>;\r\n      if (error) return <p>Error</p>\r\n         console.log(data)*/\r\n    return (\r\n        <div id=\"book-details\">\r\n        <p>OutPut here</p>\r\n        {displayBookDetails(loading, data, error)}\r\n    </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useQuery } from '@apollo/client';\r\n\r\nimport { BooksQuery } from '../queries/Queries'\r\nimport { Bookdetails } from './Bookdetails';\r\n\r\nconst DisplayBooks = ({ loading, error, data, selectBook }) => {\r\n    if (loading) return <p>Loading....</p>;\r\n    if (error) return <p>Something went wrong</p>;\r\n    return data.books.map(book => {\r\n      return (\r\n        <li key={book.id} onClick={() => selectBook(book.id)}>\r\n          {book.name}\r\n        </li>\r\n      );\r\n    });\r\n  };\r\n  \r\n  export const BookList=()=> {\r\n    const [selected, setSelected] = useState(null);\r\n    const { loading, error, data } = useQuery(BooksQuery);\r\n    const selectBook = id => setSelected(id);\r\n    return (\r\n      <div id=\"book-list\">\r\n        <li>\r\n         <DisplayBooks\r\n            loading={loading}\r\n            error={error}\r\n            data={data}\r\n            selectBook={selectBook}\r\n          />\r\n        </li>\r\n        <Bookdetails bookId={selected} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n"],"sourceRoot":""}